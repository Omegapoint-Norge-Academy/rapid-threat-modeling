@using Rtm.BlazorClient.Models
@using Rtm.BlazorClient.Services

@page "/weather"
@inject WeatherForecastCacheService WeatherForecastCacheService
@implements IDisposable

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

@if (_forecastSeries == null || _forecastSeries.WeatherForecasts.Count == 0)
{
    <p><em>Waiting for weather data...</em></p>
}
else
{
    <p>Updated at: @_forecastSeries.Timestamp.ToLongTimeString()</p>
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th aria-label="Temperature in Celsius">Temp. (C)</th>
            <th aria-label="Temperature in Farenheit">Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecastSeries.WeatherForecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecastSeriesModel? _forecastSeries;

    protected override void OnInitialized()
    {
        _forecastSeries = WeatherForecastCacheService.GetWeatherForecastSeries();
        WeatherForecastCacheService.OnChange += HandleUpdate;
    }

    private void HandleUpdate()
    {
        _forecastSeries = WeatherForecastCacheService.GetWeatherForecastSeries();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WeatherForecastCacheService.OnChange -= HandleUpdate;
    }

}
